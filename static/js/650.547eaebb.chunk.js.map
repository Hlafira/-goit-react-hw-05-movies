{"version":3,"file":"static/js/650.547eaebb.chunk.js","mappings":"oOACMA,EAAa,SAAC,GAAiB,IAC7BC,EAD4B,EAAdC,QACKC,KAAI,SAACC,EAAIC,GAChC,OACE,2BACE,oCAAYD,EAAGE,WACf,uBAAIF,EAAGG,YAFAF,EAKZ,IACD,OACE,+BACE,wBAAKJ,KAGV,EAED,IAEAD,EAAWQ,aAAe,CACxBN,QAAS,ICdX,IA4BA,EA5BoB,WAClB,IAAQO,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KAeA,OAdAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBL,GACfM,MAAK,SAAAC,GACJ,IAAMC,EAAaD,EAAOb,KAAI,SAAAC,GAAE,MAAK,CACnCE,OAAQF,EAAGE,OACXC,QAASH,EAAGG,QACZE,GAAIL,EAAGK,GAHuB,IAKhCG,GAAW,kBAAMK,CAAN,GACZ,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GACJ,GAAE,CAACV,KAEF,8BACGP,EAAQoB,OAAS,GAChB,SAAC,EAAD,CAAYpB,QAASA,KAErB,qEAIP,C,sOC9BKqB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAJY,sCAQHC,EAAY,mCACZC,EAAiB,kCAEvB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,0FACER,EAEJS,IAAI,qBAAsB,CACzBN,OAAQ,CACNK,KAAAA,EACAE,SAAU,WAGblB,MAAK,SAAAC,GAGJ,OAFgBA,EAAOkB,KAAKC,QAEbhC,KAAI,gBAAGM,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,MAA7B,MAA0C,CAC3D7B,GAAAA,EACA6B,MAAOF,IAAcE,GAAgBD,GAFpB,GAIpB,KAhBE,kEAmBA,SAAeE,EAAtB,iDAAO,OAAP,oBAAO,WAAiCC,EAAOT,GAAxC,0FACER,EACJS,IAAI,eAAgB,CACnBN,OAAQ,CACNK,KAAAA,EACAU,eAAe,EACfD,MAAAA,EACAE,QAAS,qBAGZ3B,MAAK,SAAAC,GAEJ,OADgBA,EAAOkB,KAAKC,QACbhC,KAAI,gBAAGM,EAAH,EAAGA,GAAI2B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,MAA7B,MAA0C,CAC3D7B,GAAAA,EACA6B,MAAOF,IAAcE,GAAgBD,GAFpB,GAIpB,KAhBE,kEAmBA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,0FACErB,EAASS,IAAT,gBAAsBY,GAAW,CAAC,GAAG7B,MAAK,qBAAGmB,IAAH,KAD5C,kEAIA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,0FACErB,EACJS,IADI,gBACSY,EADT,YAC4B,CAAC,GACjC7B,MAAK,qBAAGmB,KAAgBY,IAAnB,KAHH,kEAMA,SAAehC,EAAtB,+CAAO,OAAP,oBAAO,WAAiC8B,GAAjC,0FACErB,EACJS,IADI,gBACSY,EADT,YAC4B,CAAC,GACjC7B,MAAK,qBAAGmB,KAAgBC,OAAnB,KAHH,kE","sources":["components/ReviewList/ReviewList.jsx","pages/ReviewsPage/ReviewsPage.jsx","shared/API/theMovieDb.js"],"sourcesContent":["import PropTypes from 'prop-types';\nconst ReviewList = ({ reviews }) => {\n  const elements = reviews.map((el, index) => {\n    return (\n      <li key={index}>\n        <h4>Author:{el.author}</h4>\n        <p>{el.content}</p>\n      </li>\n    );\n  });\n  return (\n    <>\n      <ul>{elements}</ul>\n    </>\n  );\n};\n\nexport default ReviewList;\n\nReviewList.defaultProps = {\n  reviews: [],\n};\n\nReviewList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { fetchMovieReviews } from '../../shared/API/theMovieDb';\nimport ReviewList from '../../components/ReviewList/ReviewList';\n\nconst ReviewsPage = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    fetchMovieReviews(id)\n      .then(result => {\n        const newReviews = result.map(el => ({\n          author: el.author,\n          content: el.content,\n          id: el.id,\n        }));\n        setReviews(() => newReviews);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }, [id]);\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ReviewList reviews={reviews} />\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\nconst API_KEY = 'c1b8c874be54ebc5c34c225dbd6a36f5';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const imagePath = 'https://image.tmdb.org/t/p/w185/';\nexport const imageSmallPath = 'https://image.tmdb.org/t/p/w92/';\n\nexport async function fetchPoPularMovies(page) {\n  return instance\n\n    .get('trending/movie/day', {\n      params: {\n        page,\n        language: 'en-US',\n      },\n    })\n    .then(result => {\n      const results = result.data.results;\n\n      return results.map(({ id, name, original_title, title }) => ({\n        id,\n        title: name ? name : title ? title : original_title,\n      }));\n    });\n}\n\nexport async function fetchSearchMovies(query, page) {\n  return instance\n    .get('search/movie', {\n      params: {\n        page,\n        include_adult: false,\n        query,\n        sort_by: 'popularity.desc',\n      },\n    })\n    .then(result => {\n      const results = result.data.results;\n      return results.map(({ id, name, original_title, title }) => ({\n        id,\n        title: name ? name : title ? title : original_title,\n      }));\n    });\n}\n\nexport async function fetchMovieDetails(movieId) {\n  return instance.get(`movie/${movieId}`, {}).then(({ data }) => data);\n}\n\nexport async function fetchMovieCredits(movieId) {\n  return instance\n    .get(`movie/${movieId}/credits`, {})\n    .then(({ data }) => data.cast);\n}\n\nexport async function fetchMovieReviews(movieId) {\n  return instance\n    .get(`movie/${movieId}/reviews`, {})\n    .then(({ data }) => data.results);\n}\n"],"names":["ReviewList","elements","reviews","map","el","index","author","content","defaultProps","id","useParams","useState","setReviews","useEffect","fetchMovieReviews","then","result","newReviews","catch","e","console","log","length","instance","axios","baseURL","params","api_key","imagePath","imageSmallPath","fetchPoPularMovies","page","get","language","data","results","name","original_title","title","fetchSearchMovies","query","include_adult","sort_by","fetchMovieDetails","movieId","fetchMovieCredits","cast"],"sourceRoot":""}