{"version":3,"file":"static/js/680.b4ba37b4.chunk.js","mappings":"oKAIMA,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MACXC,EAAYH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OAC1B,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaF,GACfG,MAAO,CAAEC,KAAMR,EAASS,SAAWT,EAASU,QAF9C,SAIGL,KALID,EADiB,IAU5B,OAAO,wBAAKF,GACb,EAED,MAEAJ,EAAWa,aAAe,CACxBZ,MAAO,CAAC,E,8ECKV,UAvBiB,WACf,OAA0Ba,EAAAA,EAAAA,UAAS,IAAnC,eAAOb,EAAP,KAAcc,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAmB,GAChBC,MAAK,SAAAC,GACJJ,GAAS,SAAAK,GACP,OAAOD,CACR,GACF,IACAE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GACJ,GAAE,KAGD,iCACE,4CACA,SAAC,IAAD,CAAYrB,MAAOA,MAGxB,C,sOCvBKwB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAJY,sCAQHC,EAAY,mCACZC,EAAiB,kCAEvB,SAAed,EAAtB,+CAAO,OAAP,oBAAO,WAAkCe,GAAlC,0FACEP,EAEJQ,IAAI,qBAAsB,CACzBL,OAAQ,CACNI,KAAAA,EACAE,SAAU,WAGbhB,MAAK,SAAAC,GAGJ,OAFgBA,EAAOgB,KAAKC,QAEb/B,KAAI,gBAAGC,EAAH,EAAGA,GAAI+B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,eAAgB/B,EAA7B,EAA6BA,MAA7B,MAA0C,CAC3DD,GAAAA,EACAC,MAAO8B,IAAc9B,GAAgB+B,GAFpB,GAIpB,KAhBE,kEAmBA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAiCC,EAAOR,GAAxC,0FACEP,EACJQ,IAAI,eAAgB,CACnBL,OAAQ,CACNI,KAAAA,EACAS,eAAe,EACfD,MAAAA,EACAE,QAAS,qBAGZxB,MAAK,SAAAC,GAEJ,OADgBA,EAAOgB,KAAKC,QACb/B,KAAI,gBAAGC,EAAH,EAAGA,GAAI+B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,eAAgB/B,EAA7B,EAA6BA,MAA7B,MAA0C,CAC3DD,GAAAA,EACAC,MAAO8B,IAAc9B,GAAgB+B,GAFpB,GAIpB,KAhBE,kEAmBA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,0FACEnB,EAASQ,IAAT,gBAAsBW,GAAW,CAAC,GAAG1B,MAAK,qBAAGiB,IAAH,KAD5C,kEAIA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,0FACEnB,EACJQ,IADI,gBACSW,EADT,YAC4B,CAAC,GACjC1B,MAAK,qBAAGiB,KAAgBW,IAAnB,KAHH,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCH,GAAjC,0FACEnB,EACJQ,IADI,gBACSW,EADT,YAC4B,CAAC,GACjC1B,MAAK,qBAAGiB,KAAgBC,OAAnB,KAHH,kE","sources":["components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.jsx","shared/API/theMovieDb.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ films }) => {\n  const location = useLocation();\n  const listFilms = films.map(({ id, title }) => (\n    <li key={id}>\n      <Link\n        to={`/movies/${id}`}\n        state={{ from: location.pathname + location.search }}\n      >\n        {title}\n      </Link>\n    </li>\n  ));\n  return <ul>{listFilms}</ul>;\n};\n\nexport default MoviesList;\n\nMoviesList.defaultProps = {\n  films: {},\n};\n\nMoviesList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { fetchPoPularMovies } from '../../shared/API/theMovieDb';\nimport MoviesList from '../../components/MoviesList/MoviesList';\n\nconst HomePage = () => {\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    fetchPoPularMovies(1)\n      .then(result => {\n        setFilms(prevFilms => {\n          return result;\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      <MoviesList films={films} />\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\nconst API_KEY = 'c1b8c874be54ebc5c34c225dbd6a36f5';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const imagePath = 'https://image.tmdb.org/t/p/w185/';\nexport const imageSmallPath = 'https://image.tmdb.org/t/p/w92/';\n\nexport async function fetchPoPularMovies(page) {\n  return instance\n\n    .get('trending/movie/day', {\n      params: {\n        page,\n        language: 'en-US',\n      },\n    })\n    .then(result => {\n      const results = result.data.results;\n\n      return results.map(({ id, name, original_title, title }) => ({\n        id,\n        title: name ? name : title ? title : original_title,\n      }));\n    });\n}\n\nexport async function fetchSearchMovies(query, page) {\n  return instance\n    .get('search/movie', {\n      params: {\n        page,\n        include_adult: false,\n        query,\n        sort_by: 'popularity.desc',\n      },\n    })\n    .then(result => {\n      const results = result.data.results;\n      return results.map(({ id, name, original_title, title }) => ({\n        id,\n        title: name ? name : title ? title : original_title,\n      }));\n    });\n}\n\nexport async function fetchMovieDetails(movieId) {\n  return instance.get(`movie/${movieId}`, {}).then(({ data }) => data);\n}\n\nexport async function fetchMovieCredits(movieId) {\n  return instance\n    .get(`movie/${movieId}/credits`, {})\n    .then(({ data }) => data.cast);\n}\n\nexport async function fetchMovieReviews(movieId) {\n  return instance\n    .get(`movie/${movieId}/reviews`, {})\n    .then(({ data }) => data.results);\n}\n"],"names":["MoviesList","films","location","useLocation","listFilms","map","id","title","to","state","from","pathname","search","defaultProps","useState","setFilms","useEffect","fetchPoPularMovies","then","result","prevFilms","catch","e","console","log","instance","axios","baseURL","params","api_key","imagePath","imageSmallPath","page","get","language","data","results","name","original_title","fetchSearchMovies","query","include_adult","sort_by","fetchMovieDetails","movieId","fetchMovieCredits","cast","fetchMovieReviews"],"sourceRoot":""}